// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValidatorInfo validator info
//
// swagger:model ValidatorInfo
type ValidatorInfo struct {

	// consensus pubkey
	// Required: true
	ConsensusPubkey *string `json:"consensus_pubkey"`

	// description
	// Required: true
	Description *ValidatorInfoDescription `json:"description"`
}

// Validate validates this validator info
func (m *ValidatorInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsensusPubkey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidatorInfo) validateConsensusPubkey(formats strfmt.Registry) error {

	if err := validate.Required("consensus_pubkey", "body", m.ConsensusPubkey); err != nil {
		return err
	}

	return nil
}

func (m *ValidatorInfo) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this validator info based on the context it is used
func (m *ValidatorInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidatorInfo) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorInfo) UnmarshalBinary(b []byte) error {
	var res ValidatorInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ValidatorInfoDescription validator info description
//
// swagger:model ValidatorInfoDescription
type ValidatorInfoDescription struct {

	// moniker
	Moniker string `json:"moniker,omitempty"`
}

// Validate validates this validator info description
func (m *ValidatorInfoDescription) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validator info description based on context it is used
func (m *ValidatorInfoDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorInfoDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorInfoDescription) UnmarshalBinary(b []byte) error {
	var res ValidatorInfoDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
