// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new transactions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transactions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSlashingValidatorsValidatorPubKeySigningInfo gets validator signing info

Get Validator Signing Info
*/
func (a *Client) GetSlashingValidatorsValidatorPubKeySigningInfo(params *GetSlashingValidatorsValidatorPubKeySigningInfoParams) (*GetSlashingValidatorsValidatorPubKeySigningInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSlashingValidatorsValidatorPubKeySigningInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSlashingValidatorsValidatorPubKeySigningInfo",
		Method:             "GET",
		PathPattern:        "/slashing/validators/{validatorPubKey}/signing_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSlashingValidatorsValidatorPubKeySigningInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSlashingValidatorsValidatorPubKeySigningInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSlashingValidatorsValidatorPubKeySigningInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStakingValidatorsValidatorAddr gets validator info

Get validator info
*/
func (a *Client) GetStakingValidatorsValidatorAddr(params *GetStakingValidatorsValidatorAddrParams) (*GetStakingValidatorsValidatorAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingValidatorsValidatorAddrParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStakingValidatorsValidatorAddr",
		Method:             "GET",
		PathPattern:        "/staking/validators/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStakingValidatorsValidatorAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingValidatorsValidatorAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingValidatorsValidatorAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Txs gets tx list

Get Tx List
*/
func (a *Client) GetV1Txs(params *GetV1TxsParams) (*GetV1TxsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TxsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetV1Txs",
		Method:             "GET",
		PathPattern:        "/v1/txs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1TxsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TxsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Txs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
